services:
  mlflow_db:
    image: postgres:latest
    container_name: mlflow_db
    restart: always
    ports:
      - "15432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - mlflow_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ansible-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  minio:
    restart: always
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_ACCESS_KEY}
      - MINIO_STORAGE_USE_HTTPS=false
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - ansible-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/live || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  minio-setup:
    restart: "no"
    image: quay.io/minio/mc
    container_name: minio-setup
    entrypoint: >
      bash -c "
      # Wait for MinIO to be ready
      echo "Waiting for MinIO to be ready..."

      # Loop until MinIO responds
      while ! mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}; do
          echo "MinIO is not ready yet. Waiting..."
          sleep 2  # Check every 2 seconds
      done
      # Configure MinIO Client
      mc alias set minioserver http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}

      # Create the MLFlow bucket
      mc mb minioserver/mlflow
      "
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_ACCESS_KEY}
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - ansible-net

  mlflow:
    restart: always
    build: .
    image: mlflow_server
    container_name: mlflow_server
    ports:
      - "5000:5000"
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT}
      - MLFLOW_S3_IGNORE_TLS=true
      - MLFLOW_TRACKING_USERNAME=${MLFLOW_TRACKING_USERNAME}
      - MLFLOW_TRACKING_PASSWORD=${MLFLOW_TRACKING_PASSWORD}
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@mlflow_db/mlflow
      --host ${HOST}
      --serve-artifacts
      --artifacts-destination s3://mlflow
    depends_on:
      mlflow_db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - ansible-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  mlflow_data:
    name: mlflow_data
  minio_data:
    name: minio_data

networks:
  ansible-net:
    name: ansible-net

